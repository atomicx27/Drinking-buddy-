/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Survey as PrismaSurvey,
  User as PrismaUser,
} from "@prisma/client";

export class SurveyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SurveyCountArgs, "select">): Promise<number> {
    return this.prisma.survey.count(args);
  }

  async surveys<T extends Prisma.SurveyFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SurveyFindManyArgs>
  ): Promise<PrismaSurvey[]> {
    return this.prisma.survey.findMany<Prisma.SurveyFindManyArgs>(args);
  }
  async survey<T extends Prisma.SurveyFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SurveyFindUniqueArgs>
  ): Promise<PrismaSurvey | null> {
    return this.prisma.survey.findUnique(args);
  }
  async createSurvey<T extends Prisma.SurveyCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SurveyCreateArgs>
  ): Promise<PrismaSurvey> {
    return this.prisma.survey.create<T>(args);
  }
  async updateSurvey<T extends Prisma.SurveyUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SurveyUpdateArgs>
  ): Promise<PrismaSurvey> {
    return this.prisma.survey.update<T>(args);
  }
  async deleteSurvey<T extends Prisma.SurveyDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SurveyDeleteArgs>
  ): Promise<PrismaSurvey> {
    return this.prisma.survey.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.survey
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
