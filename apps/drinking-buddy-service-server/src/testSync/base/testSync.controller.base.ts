/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { TestSyncService } from "../testSync.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TestSyncCreateInput } from "./TestSyncCreateInput";
import { TestSync } from "./TestSync";
import { TestSyncFindManyArgs } from "./TestSyncFindManyArgs";
import { TestSyncWhereUniqueInput } from "./TestSyncWhereUniqueInput";
import { TestSyncUpdateInput } from "./TestSyncUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TestSyncControllerBase {
  constructor(
    protected readonly service: TestSyncService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TestSync })
  @nestAccessControl.UseRoles({
    resource: "TestSync",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createTestSync(
    @common.Body() data: TestSyncCreateInput
  ): Promise<TestSync> {
    return await this.service.createTestSync({
      data: data,
      select: {
        createdAt: true,
        id: true,
        testField1: true,
        testField2: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [TestSync] })
  @ApiNestedQuery(TestSyncFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "TestSync",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async testSyncs(@common.Req() request: Request): Promise<TestSync[]> {
    const args = plainToClass(TestSyncFindManyArgs, request.query);
    return this.service.testSyncs({
      ...args,
      select: {
        createdAt: true,
        id: true,
        testField1: true,
        testField2: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TestSync })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TestSync",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async testSync(
    @common.Param() params: TestSyncWhereUniqueInput
  ): Promise<TestSync | null> {
    const result = await this.service.testSync({
      where: params,
      select: {
        createdAt: true,
        id: true,
        testField1: true,
        testField2: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TestSync })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TestSync",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateTestSync(
    @common.Param() params: TestSyncWhereUniqueInput,
    @common.Body() data: TestSyncUpdateInput
  ): Promise<TestSync | null> {
    try {
      return await this.service.updateTestSync({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          testField1: true,
          testField2: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TestSync })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TestSync",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteTestSync(
    @common.Param() params: TestSyncWhereUniqueInput
  ): Promise<TestSync | null> {
    try {
      return await this.service.deleteTestSync({
        where: params,
        select: {
          createdAt: true,
          id: true,
          testField1: true,
          testField2: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
