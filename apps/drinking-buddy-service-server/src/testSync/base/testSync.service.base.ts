/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, TestSync as PrismaTestSync } from "@prisma/client";

export class TestSyncServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TestSyncCountArgs, "select">): Promise<number> {
    return this.prisma.testSync.count(args);
  }

  async testSyncs<T extends Prisma.TestSyncFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TestSyncFindManyArgs>
  ): Promise<PrismaTestSync[]> {
    return this.prisma.testSync.findMany<Prisma.TestSyncFindManyArgs>(args);
  }
  async testSync<T extends Prisma.TestSyncFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TestSyncFindUniqueArgs>
  ): Promise<PrismaTestSync | null> {
    return this.prisma.testSync.findUnique(args);
  }
  async createTestSync<T extends Prisma.TestSyncCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TestSyncCreateArgs>
  ): Promise<PrismaTestSync> {
    return this.prisma.testSync.create<T>(args);
  }
  async updateTestSync<T extends Prisma.TestSyncUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TestSyncUpdateArgs>
  ): Promise<PrismaTestSync> {
    return this.prisma.testSync.update<T>(args);
  }
  async deleteTestSync<T extends Prisma.TestSyncDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TestSyncDeleteArgs>
  ): Promise<PrismaTestSync> {
    return this.prisma.testSync.delete(args);
  }
}
